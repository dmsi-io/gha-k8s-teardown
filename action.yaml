name: 'Teardown Kubernetes Namespace'
description: 'After creating new namespaces via GHA, it is important to cleanup the Kubernetes cluster. This action will manage the cleanup process of a feature namespace.'

inputs:
  GCP_SA_KEY: 
    description: 'GCP Service Account Key (JSON)'
    required: true

  GKE_CLUSTER_NAME:
    description: 'Google Kubernetes Engine Cluster name'
    required: true

  GCP_ZONE: 
    description: 'GCP Zone'
    required: true

  GCP_PROJECT_ID:
    description: 'GCP Project ID'
    required: true

  GHA_ACCESS_USER: 
    description: 'GitHub Actions Access Username'
    required: false

  GHA_ACCESS_TOKEN:
    description: 'GitHub Actions Access Token'
    required: false
    
  TLD:
    description: 'Top Level Domain to create subdomain on.'
    required: false

  repos:
    description: 'Comma separated list of repositories that are deployed concurrently and require extra checks before tearing down.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Export Environment Variables
      uses: dmsi-io/gha-env-variables@v1
      with:
        TLD: ${{ inputs.TLD }}
        GCP_PROJECT_ID: ${{ inputs.GCP_PROJECT_ID }}

    - name: Check branch exists
      if: inputs.GHA_ACCESS_USER != '' && inputs.GHA_ACCESS_TOKEN != ''
      run: |
        REPOS="${{ inputs.repos }}"
        for repo in ${REPOS//,/ }
        do
          echo "checking $repo"
          if [[ $(git ls-remote "https://${{ inputs.GHA_ACCESS_USER }}:${{ inputs.GHA_ACCESS_TOKEN }}@github.com/${{ github.repository_owner}}/$repo.git" "${{ github.ref }}") ]]; then
            echo "if condition"
          else
            echo "else condition"
          fi 
        done
      shell: bash

    ###### GCloud Setup ######

    - name: Setup GCloud Auth
      id: auth
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ inputs.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1

    - name: Authenticate GKE cluster
      run: gcloud container clusters get-credentials ${{ inputs.GKE_CLUSTER_NAME }} --zone ${{ inputs.GCP_ZONE }} --project ${{ inputs.GCP_PROJECT_ID }}
      shell: bash

    ###### Deploy Kubernetes Artifacts ######

    - name: Print Deployments
      run: kubectl get -o=name deployment -n $NAMESPACE
      shell: bash