name: 'Teardown Kubernetes Namespace'
description: 'After creating new namespaces via GHA, it is important to cleanup the Kubernetes cluster. This action will manage the cleanup process of a feature namespace.'

inputs:
  GCP_SA_KEY: 
    description: 'GCP Service Account Key (JSON)'
    required: true

  GKE_CLUSTER_NAME:
    description: 'Google Kubernetes Engine Cluster name'
    required: true

  GCP_ZONE: 
    description: 'GCP Zone'
    required: true

  GCP_PROJECT_ID:
    description: 'GCP Project ID'
    required: true

  GHA_ACCESS_USER: 
    description: 'GitHub Actions Access Username'
    required: false

  GHA_ACCESS_TOKEN:
    description: 'GitHub Actions Access Token'
    required: false
    
  TLD:
    description: 'Top Level Domain to create subdomain on.'
    required: false

  FROM_NAMESPACE: 
    description: 'Allows to override the desired NAMESPACE variable'
    required: false
    default: ${{ github.event.repository.default_branch }}

  repos:
    description: 'Comma separated list of repositories that are deployed concurrently and require extra checks before tearing down.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Export Environment Variables
      uses: dmsi-io/gha-env-variables@v1
      with:
        TLD: ${{ inputs.TLD }}
        GCP_PROJECT_ID: ${{ inputs.GCP_PROJECT_ID }}

    - name: FROM_NAMESPACE
      run: |
        FROM_NAMESPACE=$(gha-env-variables/clean_variable.sh ${{ inputs.FROM_NAMESPACE }})
        echo "FROM_NAMESPACE=$FROM_NAMESPACE"

        echo "FROM_NAMESPACE=$FROM_NAMESPACE" >> $GITHUB_ENV
      shell: bash

    ###### Check open repo branches ######

    - name: Configure git for private modules
      if: inputs.GHA_ACCESS_USER != '' && inputs.GHA_ACCESS_TOKEN != ''
      run: git config --global url."https://${{ inputs.GHA_ACCESS_USER }}:${{ inputs.GHA_ACCESS_TOKEN }}@github.com".insteadOf "https://github.com"
      shell: bash

    - name: Check branch exists
      id: branch-exists # use this to check for `branch-exists` (`steps.branch-exists.outputs.$repo != true`)
      run: |
        REPOS="${{ inputs.repos }}"
        for repo in ${REPOS//,/ }
        do
          echo "checking $repo"
          if [[ $(git ls-remote "https://github.com/${{ github.repository_owner}}/$repo.git" "${{ github.ref }}") ]]; then
            echo "::set-output name=$repo::true"
          else
            echo "could not find ${{ github.ref }} in ${{ github.repository_owner}}/$repo"
          fi 
        done
      shell: bash

    - name: Print output of each repo
      run: |
        REPOS="${{ inputs.repos }}"
        for repo in ${REPOS//,/ }
        do
          echo "$repo: ${{ steps.branch-exists.outputs.$repo }}"
        done
      shell: bash

    ###### GCloud Setup ######

    - name: Setup GCloud Auth
      id: auth
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ inputs.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1

    - name: Authenticate GKE cluster
      run: gcloud container clusters get-credentials ${{ inputs.GKE_CLUSTER_NAME }} --zone ${{ inputs.GCP_ZONE }} --project ${{ inputs.GCP_PROJECT_ID }}
      shell: bash

    ###### Teardown Kubernetes Artifacts ######

    - name: Remove Repo Deployment
      run: kubectl delete deployment $SERVICE_NAME -n $NAMESPACE
      shell: bash

    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: dmsi-io/gha-k8s-namespace
        path: k8s-namespace

    - run: cat external-service-template.yaml | envsubst
      working-directory: gha-k8s-namespace/k8s
      shell: bash

    - name: Replace Service with ExternalName
      run: |
        if [[ $(kubectl get service $SERVICE_NAME -n $FROM_NAMESPACE -o=name --ignore-not-found) ]]; then 
          export EXTERNAL_SERVICE=${n##*/}
          export PORT=$(kubectl get $n -n $FROM_NAMESPACE -o json \
                  | jq -r '.spec.ports[].port')

          cat external-service-template.yaml | envsubst | kubectl apply -f - 
        fi
      shell: bash
      working-directory: gha-k8s-namespace/k8s
      